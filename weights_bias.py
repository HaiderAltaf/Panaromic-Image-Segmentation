# -*- coding: utf-8 -*-
"""weights_bias.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1POXCXUtfevNn4K_Mw87ATHv11vh9Aw_Q

#Function to initialize the weights and biases
"""

import numpy as np

def weights_bias(weight_init, no_of_neuron, hid_layer, X_train, no_of_classes):
  
  n, L = no_of_neuron, hid_layer
  Weights = []
  bias    = []
  np.random.seed(0)

  if weight_init =="random":
    # initialize weights
    #temp1 = np.random.rand(n, len(X_train[0]))
    temp1 = np.random.uniform(-0.5, 0.5, size=(n, len(X_train[0])))
    Weights.append(temp1)
    
    for i in range(1, L-1):
      temp1 = np.random.uniform(-0.5, 0.5, size=(n, n))
      Weights.append(temp1)

    #temp1 = np.random.rand(no_of_classes, n)
    temp1 = np.random.uniform(-0.5, 0.5, size=(no_of_classes, n))
    Weights.append(temp1)
    
    # initialize bias
    for i in range(L-1):
      temp2 = np.random.uniform(-0.5, 0.5, n)
      bias.append(temp2)
    temp2 = np.random.uniform(-0.5, 0.5, no_of_classes)
    bias.append(temp2)

  if weight_init =="xavier":
    
    # initialize weights
    temp1 = np.random.randn(n, len(X_train[0]))/np.sqrt(len(X_train[0])) 
    Weights.append(temp1)
    for i in range(1, L-1):
      temp1  = np.random.randn(n,n)/np.sqrt(n)
      Weights.append(temp1)

    temp1 = np.random.randn(no_of_classes, n)/np.sqrt(no_of_classes)
    Weights.append(temp1)

    # initialize bias
    for i in range(L-1):
      temp2  = np.random.randn(n)/np.sqrt(n)   # for schochastic GD
      bias.append(temp2)

    temp2 = np.random.randn(no_of_classes)/np.sqrt(no_of_classes)   # for schochastic GD
    bias.append(temp2)


  if weight_init ==3:
    # initialize weights
    temp = np.zeros((n, len(X_train[0])))
    Weights.append(temp)

    for i in range(1, L-1):
      temp = np.zeros((n, n))
      Weights.append(temp)

    temp = np.zeros((no_of_classes, n))
    Weights.append(temp)

    # initialize bias
    for i in range(L-1):
      temp = np.zeros(n)
      bias.append(temp)

    temp = np.zeros(no_of_classes)
    bias.append(temp)

  
  return Weights, bias